#coding=utf-8

import pandas as pd
import re
import jieba
from collections import Counter
from pyecharts import options as opts
from pyecharts.globals import ThemeType
from pyecharts.charts import Bar
from pyecharts.charts import Pie
from pyecharts.charts import Map
from pyecharts.charts import Boxplot
from pyecharts.charts import WordCloud
from pyecharts.charts import Page

'''
数据清洗：
1、添加列名
2、去重
3、缺失值处理
4、发货地字段处理
'''
df = pd.read_csv('口红.csv',header=None)
df.columns = ['价格','付款人数','商品描述','店铺名','发货地']
# 查看重复值，发现一个大瓜，从第51页开始，每页基本都是重复的，换其他关键词也是一样
# print(df.duplicated().sum())
# 去重重复值
df.drop_duplicates(inplace=True)
# 查看缺失值：付款人数31个缺失，发货地103个缺失
# print(df.isnull().sum())
# 查看付款人数缺失的商品描述，均带“会员尊享”或“圣诞礼物”字样，直接填充为“0+人付款"吧
# print(df[df[['付款人数','商品描述']].isnull().T.any()][['付款人数','商品描述']])
df['付款人数'].fillna(value='0+人付款',inplace=True)
# 查看发货地缺失的店铺名，只有8个，去tb搜索手工填充
# print(df[df[['发货地','店铺名']].isnull().T.any()][['发货地','店铺名']]['店铺名'].value_counts())
df.loc[df.店铺名 == 'colorkey珂拉琪官方旗舰店','发货地'] = '广东 广州'
df.loc[df.店铺名 == '爱马仕香水美妆官方旗舰店','发货地'] = '浙江 嘉兴'
df.loc[df.店铺名 == 'christianlouboutin美妆官方旗舰店','发货地'] = '浙江 杭州'
df.loc[df.店铺名 == 'gucci古驰美妆官方旗舰店','发货地'] = '江苏 无锡'
df.loc[df.店铺名 == 'amortals尔木萄官方旗舰店','发货地'] = '广东 广州'
df.loc[df.店铺名 == 'daisysky雏菊的天空旗舰店','发货地'] = '湖南 长沙'
df.loc[df.店铺名 == 'shiseido资生堂官方旗舰店','发货地'] = '江苏 苏州'
df.loc[df.店铺名 == 'makeupforever官方旗舰店','发货地'] = '上海'
# 处理付款人数：1-将万替换为0000；2-正则取数字再转化为int型
df['付款人数'] = df['付款人数'].apply(lambda x: x.replace('万','0000'))
df['付款人数'] = df['付款人数'].apply(lambda x: re.findall('\d+',x)[0]).astype('int')
# 处理发货地：将省市分开
df['省'] = df['发货地'].apply(lambda x: x if len(x) == 2 else x[:2])
df['市'] = df['发货地'].apply(lambda x: x if len(x) == 2 else x[-2:])
# print(df.info())
'''
可视化：
1、口红销量30000及以上的单品 柱状图
2、口红款式数量Top20店铺 柱状图
3、店铺累计销量Top30 饼图
4、发货地分析 全国地图
5、价格分析
6、词云
'''

'''
# 口红销量30000及以上的单品 柱状图
# 取单品销量30000及以上的商品，按销量降序，整理成柱状图的横纵坐标参数形式
df_30000 = df.query('付款人数 >= 30000').sort_values(by='付款人数',ascending=False)
# print(df_30000['商品描述'].tolist())
# print(df_30000['付款人数'].tolist())
x_bar_30000 = ['INTO YOU女主角唇泥雾面哑光丝绒口红唇釉唇彩学生平价小众品牌', 'colorkey珂拉琪空气唇釉女唇彩丝绒雾面口红女官方旗舰店大牌正品', 'colorkey珂拉琪小黑镜唇釉女唇彩唇蜜口红官方旗舰店正品镜面水光', 'colorkey珂拉琪水雾唇露唇釉女唇彩镜面水光口红女平价学生纯欲风', 'INTO YOU空气唇泥薄款哑光柔雾丝绒唇釉口红显白平价学生小众品牌', '【秋冬新色】Judydoll橘朵唇泥小奶泥哑光唇釉口红女唇蜜唇油唇彩', '【新品上市】完美日记名片唇釉赤狐红棕026深陷红丝绒哑光口红', '[秋冬新色]卡姿兰口红女显白雾吻唇膏裸色系豆沙奶茶小众礼物M278', '完美日记天鹅绒唇釉莫奈红丝绒金丝绒口红女雾面', '阿玛尼红管丝绒哑光唇釉丝绒口红滋润保湿烂番茄405丹砂421正品', 'Joocyee酵色唇釉琥珀哑光唇泥口红秋冬滋润持久平价学生女', 'Kaleidos万花镜唇粉霜哑光冷烟枪鸽血红唇泥女不沾杯小众口红唇釉', 'colorkey珂拉琪小彩弹小彩蛋唇泥丝绒唇釉口红官方旗舰店大牌正品', 'UKISS水唇露w03水雾唇釉不沾杯光镜面雾面口红平价学生丝绒唇泥彩', '【官方正品】3CE丝绒唇釉 秋冬新品粉黛色雾面哑光慕斯口红', 'Joocyee酵色新色口红唇膏夏禅镜面哑光晶冻滋润亮面女唇冻514', '【周迅同款】完美日记名片唇纱野豹金棕214狩猎丝绒唇釉口红', 'colorkey珂拉琪玉桂狗唇釉女唇彩丝绒镜面口红官方旗舰店大牌正品', '【官方正品】3CE丝绒唇釉 秋冬新色粉黛色哑光口红红梨色', '【官方正品】MAC/魅可传奇子弹头家族尤雾弹水漾口红哑光小辣椒', 'INTO YOU水雾唇釉雾面哑光口红唇彩水感唇釉口红平价学生小众品牌', 'INTO YOU凝雾唇釉女雾面哑光丝绒口红唇彩唇油官方旗舰店大牌正品', 'pinkbear皮可熊泡泡唇釉珍珠限定镜面水光口红唇油夏季小众品牌女']
y_bar_30000 = [100000, 100000, 80000, 50000, 50000, 50000, 50000, 50000, 50000, 40000, 40000, 40000, 40000, 40000, 30000, 30000, 30000, 30000, 30000, 30000, 30000, 30000, 30000]
bar_30000 = (
    Bar(init_opts=opts.InitOpts(theme=ThemeType.ROMA)).add_xaxis(x_bar_30000).add_yaxis('付款人数',y_bar_30000)
    .set_colors('#0b2e4a')
    .set_global_opts(
        title_opts=opts.TitleOpts(title='口红销量30000及以上的单品 柱状图',title_textstyle_opts=opts.TextStyleOpts(font_family='STXinwei',font_size=20)),
        legend_opts=opts.LegendOpts(pos_left='right',pos_top='top',textstyle_opts=opts.TextStyleOpts(font_family='STXinwei',font_size=15)),
        yaxis_opts=opts.AxisOpts(name='付款人数',name_textstyle_opts=opts.TextStyleOpts(color='#dd3032',font_size=15,font_family='STXinwei'),axislabel_opts=opts.LabelOpts(font_size=15,font_family='Times New Roman')),
        xaxis_opts=opts.AxisOpts(name='商品描述',name_textstyle_opts=opts.TextStyleOpts(color='#dd3032',font_size=15,font_family='STXinwei'),axislabel_opts=opts.LabelOpts(font_size=10,font_family='SimHei',rotate=-30)))
    .set_series_opts(label_opts=opts.LabelOpts(font_size=10,font_family='Times New Roman'))
)
# bar_30000.render('00口红销量30000及以上的单品 柱状图.html')


# 口红款式数量Top20店铺 柱状图
# 取口红款式数量Top20的店铺，整理成柱状图的横纵坐标参数形式
shop_of_top20 = df.groupby('店铺名').count()['商品描述'].sort_values(ascending=False)[:20]
# print(shop_of_top20.index.tolist())
# print(shop_of_top20.values.tolist())
x_bar_shopTop20 = ['天猫超市', '苏宁易购官方旗舰店', '天猫国际进口超市', '天猫国际妙颜社', '贝壳里的亡灵', 'chanel香奈儿官方旗舰店', 'mac魅可官方旗舰店', '脯拘孝譬', '小呆獭在日韩', 'sephora丝芙兰官方旗舰店', 'colorkey珂拉琪官方旗舰店', '卡姿兰官方旗舰店', 'ysl圣罗兰美妆官方旗舰店', 'tomford汤姆福特旗舰店', 'chiyuheng1995314', 'intoyou旗舰店', 'raye_mama', 'perfectdiary旗舰店', 'shilinghua9227', '么么小玄子']
y_bar_shopTop20 = [69, 54, 40, 28, 23, 20, 20, 20, 20, 20, 19, 17, 16, 16, 14, 14, 14, 13, 13, 13]
# 作图
bar_shopTop20 = (
    Bar(init_opts=opts.InitOpts(theme=ThemeType.ROMA)).add_xaxis(x_bar_shopTop20).add_yaxis('商品数量',y_bar_shopTop20)
    .set_colors('#0b2e4a')
    .set_global_opts(
        title_opts=opts.TitleOpts(title='口红数量Top20的店铺 柱状图',title_textstyle_opts=opts.TextStyleOpts(font_family='STXinwei',font_size=20)),
        legend_opts=opts.LegendOpts(pos_left='right',pos_top='top',textstyle_opts=opts.TextStyleOpts(font_family='STXinwei',font_size=15)),
        yaxis_opts=opts.AxisOpts(name='商品数量',name_textstyle_opts=opts.TextStyleOpts(color='#dd3032',font_size=15,font_family='STXinwei'),axislabel_opts=opts.LabelOpts(font_size=15,font_family='Times New Roman')),
        xaxis_opts=opts.AxisOpts(name='店铺名',name_textstyle_opts=opts.TextStyleOpts(color='#dd3032',font_size=15,font_family='STXinwei'),axislabel_opts=opts.LabelOpts(font_size=10,font_family='SimHei',rotate=25)))
    .set_series_opts(label_opts=opts.LabelOpts(font_size=13,font_family='Times New Roman'))
)
# bar_shopTop20.render('01口红款式数量Top20店铺 柱状图.html')


# 店铺累计销量 饼图
# 展示Top30的店铺，其余店铺合并展示
sales_total_30 = df.groupby('店铺名').sum()['付款人数'].sort_values(ascending=False)[:30]
# print(sales_total_30.index.tolist())
# print(sales_total_30.values.tolist())
x_pie_sales_total = ['colorkey珂拉琪官方旗舰店', 'intoyou旗舰店', 'perfectdiary旗舰店', '3ce官方旗舰店', 'joocyee酵色旗舰店', '卡姿兰官方旗舰店', 'raye_mama', 'mac魅可官方旗舰店', '天猫超市', 'pinkbear旗舰店', 'judydoll橘朵旗舰店', 'ukiss旗舰店', '韩国代购_may', '阿玛尼美妆官方旗舰店', 'ysl圣罗兰美妆官方旗舰店', '稚优泉化妆品旗舰店', '苏宁易购官方旗舰店', 'kaleidos万花镜旗舰店', '京都shop', '花知晓旗舰店', '伯特小蜜蜂海外旗舰店', '么么小玄子', '雅诗兰黛官方旗舰店', 'sd1554040', '花西子旗舰店', 'flortte旗舰店', 'vicans', 'akf官方旗舰店', '龙记陈元新', '卡姿兰丽尚专卖店', '其他835个店铺']
y_pie_sales_total = [344878, 305000, 177827, 114500, 112000, 80858, 80107, 73782, 69423, 66000, 59500, 50700, 50000, 49300, 45205, 44000, 42216, 40992, 36151, 35000, 33000, 30907, 29184, 28700, 26308, 24000, 23400, 22000, 21000, 21000, 1074222]
# 作图
# 饼图颜色分块
pie_color = ['#0b2a4e','#C00000','#F2F2F2']
for i in range(len(x_pie_sales_total)-3):
    pie_color.insert(i+2,'#FFEEB7')
pie_sales_total = (
    Pie(init_opts=opts.InitOpts(theme=ThemeType.ROMA))
    .add(series_name='',data_pair=[list(z) for z in zip(x_pie_sales_total,y_pie_sales_total)],radius=['15%','50%'])
    .set_colors(pie_color)
    .set_global_opts(
        title_opts=opts.TitleOpts(title='店铺累计销量 饼图',title_textstyle_opts=opts.TextStyleOpts(font_family='STXinwei',font_size=20)),
        legend_opts=opts.LegendOpts(is_show=False))
    .set_series_opts(label_opts=opts.LabelOpts(color='#404040',font_size=10,font_family='Times New Roman',formatter="{b}:{c}-占比{d}%"))
)
# pie_sales_total.render('02-1店铺累计销量 饼图.html')


# 同理，看下累计销售额
df['销售额'] = df.apply(lambda x: round(x['价格']*x['付款人数']/10000,0),axis=1)
sales_money_total_30 = df.groupby('店铺名').sum()['销售额'].sort_values(ascending=False)[:30]
# print(sales_money_total_30.index.tolist())
# print(sales_money_total_30.values.tolist())
x_pie_sm = ['colorkey珂拉琪官方旗舰店', 'intoyou旗舰店', 'ysl圣罗兰美妆官方旗舰店', '阿玛尼美妆官方旗舰店', 'mac魅可官方旗舰店', '3ce官方旗舰店', 'perfectdiary旗舰店', '卡姿兰官方旗舰店', 'joocyee酵色旗舰店', '雅诗兰黛官方旗舰店', 'tomford汤姆福特旗舰店', '天猫超市', 'lancome兰蔻官方旗舰店', 'dior迪奥官方旗舰店', 'judydoll橘朵旗舰店', 'sd1554040', 'pinkbear旗舰店', 'givenchy纪梵希官方旗舰店', 'nars官方旗舰店', '花西子旗舰店', 'christianlouboutin美妆官方旗舰店', 'raye_mama', 'kaleidos万花镜旗舰店', '伯特小蜜蜂海外旗舰店', '贝壳里的亡灵', 'ukiss旗舰店', '花知晓旗舰店', '霹雳小文哥', '苏宁易购官方旗舰店', 'gucci古驰美妆官方旗舰店','其他835个店铺']
y_pie_sm = [2612.0, 1908.0, 1681.0, 1632.0, 1503.0, 1356.0, 1300.0, 962.0, 957.0, 887.0, 763.0, 736.0, 620.0, 498.0, 420.0, 416.0, 406.0, 395.0, 386.0, 379.0, 370.0, 359.0, 351.0, 342.0, 339.0, 303.0, 296.0, 273.0, 270.0, 269.0, 10253]
pie_color = ['#0b2a4e','#C00000','#F2F2F2']
for i in range(len(x_pie_sm)-3):
    pie_color.insert(i+2,'#FFEEB7')
pie_sm = (
    Pie(init_opts=opts.InitOpts(theme=ThemeType.ROMA))
    .add(series_name='',data_pair=[list(z) for z in zip(x_pie_sm,y_pie_sm)],radius=['15%','50%'])
    .set_colors(pie_color)
    .set_global_opts(
        title_opts=opts.TitleOpts(title='店铺累计销售额 饼图',title_textstyle_opts=opts.TextStyleOpts(font_family='STXinwei',font_size=20)),
        legend_opts=opts.LegendOpts(is_show=False))
    .set_series_opts(label_opts=opts.LabelOpts(color='#404040',font_size=10,font_family='Times New Roman',formatter="{b}:￥{c}-占比{d}%"))
)
# pie_sm.render('02-2店铺累计销售额 饼图.html')


# 发货地分析 全国地图
# 按省聚合计数
num_of_province = df.groupby('省').count()['商品描述'].sort_values(ascending=False)
# print(num_of_province.index.tolist())
# print(num_of_province.values.tolist())
x_map_numOfprovince = ['广东', '浙江', '上海', '江苏', '山东', '北京', '福建', '四川', '安徽', '河南', '江西', '湖北', '辽宁', '湖南', '天津', '香港', '吉林', '河北', '广西', '陕西', '韩国', '澳门', '美国', '重庆', '加拿', '日本']
y_map_numOfprovince = [548, 439, 286, 255, 134, 71, 71, 41, 40, 29, 21, 21, 20, 19, 10, 6, 5, 4, 4, 4, 2, 2, 2, 2, 2, 1]
map_numOfprovince = (
    Map(init_opts=opts.InitOpts(theme=ThemeType.ROMA))
    .add(series_name='',data_pair=[list(z) for z in zip(x_map_numOfprovince,y_map_numOfprovince)],maptype='china')
    .set_global_opts(
        title_opts=opts.TitleOpts(title='国内口红发货地数量 全国地图',title_textstyle_opts=opts.TextStyleOpts(font_family='STXinwei',font_size=20)),
        visualmap_opts=opts.VisualMapOpts(max_=550,is_piecewise=True))
    .set_series_opts(label_opts=opts.LabelOpts(font_size=10,font_family='LiSu'))
)
# map_numOfprovince.render('03发货地分析 全国地图.html')


# 广东省按市聚合
df_gd = df.query('省 == "广东"')
num_of_gd = df_gd.groupby('市').count()['商品描述'].sort_values(ascending=False)
# print(num_of_gd.index.tolist())
# print(num_of_gd.values.tolist())
x_map_numOfgd = ['广州市', '深圳市', '汕头市', '佛山市', '东莞市', '珠海市', '揭阳市', '中山市', '清远市', '江门市', '惠州市', '韶关市', '潮州市', '汕尾市']
y_map_numOfgd = [280, 187, 28, 14, 11, 6, 6, 4, 3, 3, 3, 1, 1, 1]
map_numOfgd = (
    Map(init_opts=opts.InitOpts(theme=ThemeType.ROMA))
    .add(series_name='',data_pair=[list(z) for z in zip(x_map_numOfgd,y_map_numOfgd)],maptype='广东')
    .set_global_opts(
        title_opts=opts.TitleOpts(title='广东省内口红发货地数量 全国地图',title_textstyle_opts=opts.TextStyleOpts(font_family='STXinwei',font_size=20)),
        visualmap_opts=opts.VisualMapOpts(max_=280,is_piecewise=True))
    .set_series_opts(label_opts=opts.LabelOpts(font_size=10,font_family='LiSu'))
)
# map_numOfgd.render('04发货地分析 广东地图.html')


# 价格分析
# print(df['价格'].tolist())
price_list = [[79.0, 149.0, 310.0, 290.0, 330.0, 89.0, 190.0, 69.9, 59.9, 310.0, 89.0, 219.0, 119.0, 230.0, 119.0, 115.0, 370.0, 310.0, 290.0, 370.0, 69.0, 370.0, 380.0, 320.0, 115.0, 59.0, 370.0, 380.0, 380.0, 380.0, 175.0, 129.0, 383.0, 480.0, 330.0, 310.0, 880.0, 480.0, 69.8, 880.0, 480.0, 99.0, 335.0, 280.0, 89.0, 89.0, 59.0, 558.0, 49.0, 385.0, 29.0, 153.0, 158.0, 69.0, 69.0, 290.0, 89.0, 220.0, 89.0, 69.9, 380.0, 470.0, 129.0, 110.0, 59.0, 190.0, 129.0, 330.0, 350.0, 370.0, 380.0, 480.0, 480.0, 79.0, 350.0, 69.0, 290.0, 390.0, 238.0, 79.0, 318.0, 238.0, 205.0, 89.0, 370.0, 125.0, 158.0, 164.0, 158.0, 113.0, 58.0, 268.0, 258.0, 153.0, 159.0, 380.0, 59.9, 69.0, 59.0, 29.0, 370.0, 378.0, 89.0, 158.0, 285.0, 158.0, 69.0, 89.0, 185.0, 380.0, 380.0, 115.0, 190.0, 139.0, 59.0, 279.0, 370.0, 370.0, 88.0, 158.0, 258.0, 310.0, 69.0, 258.0, 89.0, 39.0, 69.0, 49.0, 88.0, 79.0, 29.0, 153.0, 443.0, 229.0, 99.0, 550.0, 480.0, 480.0, 355.0, 59.9, 67.0, 115.0, 480.0, 380.0, 28.4, 550.0, 49.0, 69.9, 59.9, 268.0, 249.0, 163.0, 385.0, 99.0, 230.0, 380.0, 175.0, 69.0, 35.0, 69.0, 79.0, 380.0, 220.0, 125.0, 699.0, 125.0, 59.0, 370.0, 290.0, 288.0, 380.0, 228.0, 350.0, 273.0, 305.0, 173.0, 59.0, 58.0, 203.0, 79.0, 115.0, 130.0, 384.0, 245.0, 339.0, 55.0, 68.0, 54.0, 148.0, 119.0, 69.0, 178.0, 173.0, 45.0, 65.0, 205.0, 138.0, 158.0, 69.0, 54.0, 88.0, 119.0, 330.0, 138.0, 228.0, 420.0, 350.0, 115.0, 239.0, 32.0, 280.0, 49.9, 239.0, 159.0, 370.0, 700.0, 300.0, 193.0, 69.0, 380.0, 173.0, 230.0, 103.0, 380.0, 113.0, 210.0, 305.0, 79.0, 230.0, 309.0, 785.0, 185.0, 109.0, 550.0, 269.0, 480.0, 198.0, 143.0, 169.0, 240.0, 385.0, 276.0, 215.0, 145.0, 285.0, 1235.0, 555.0, 525.0, 129.0, 228.0, 59.0, 320.0, 123.0, 145.0, 248.0, 110.0, 31.0, 49.0, 195.0, 148.0, 79.0, 208.0, 279.0, 89.0, 148.0, 69.0, 79.0, 208.0, 370.0, 168.0, 390.0, 185.0, 133.0, 470.0, 540.0, 89.0, 59.0, 119.0, 480.0, 300.0, 32.66, 238.0, 370.0, 330.0, 298.0, 59.0, 310.0, 358.0, 339.0, 69.0, 320.0, 119.0, 59.0, 285.0, 350.0, 99.0, 248.0, 152.0, 788.0, 168.0, 69.0, 108.0, 119.0, 139.0, 109.9, 39.9, 133.0, 199.0, 129.0, 41.8, 89.0, 24.9, 89.0, 255.0, 205.0, 319.0, 135.0, 99.0, 289.0, 239.0, 380.0, 380.0, 69.9, 34.9, 138.0, 240.0, 79.0, 206.0, 68.0, 380.0, 290.0, 78.0, 143.0, 109.0, 208.0, 39.0, 69.0, 79.0, 41.8, 29.9, 228.0, 49.0, 309.0, 45.0, 85.0, 54.0, 109.0, 29.0, 5350.0, 236.0, 348.0, 73.0, 25.0, 58.0, 350.0, 258.0, 99.0, 59.9, 328.0, 385.0, 480.0, 199.0, 125.0, 168.0, 69.9, 338.0, 183.0, 769.0, 62.0, 218.0, 238.0, 129.0, 69.0, 415.0, 319.0, 278.0, 59.0, 309.0, 41.8, 85.0, 69.8, 319.0, 134.0, 69.0, 460.0, 228.0, 89.0, 29.9, 138.0, 34.0, 689.0, 338.0, 238.0, 309.0, 62.0, 179.0, 69.8, 280.0, 129.9, 285.0, 59.9, 1280.0, 45.0, 39.0, 129.0, 170.0, 350.0, 348.0, 288.0, 68.0, 208.0, 69.0, 56.0, 78.0, 26.9, 49.0, 215.0, 290.0, 218.0, 29.0, 59.0, 64.0, 159.0, 380.0, 159.0, 89.0, 339.0, 290.0, 168.0, 508.0, 29.9, 88.0, 380.0, 300.0, 105.0, 385.0, 568.0, 29.8, 135.0, 320.0, 187.0, 53.0, 178.0, 59.0, 328.0, 219.0, 363.0, 130.0, 370.0, 220.0, 220.0, 49.9, 34.0, 380.0, 56.0, 9.9, 170.0, 428.0, 288.0, 240.0, 380.0, 29.0, 265.0, 178.0, 52.0, 69.9, 135.0, 380.0, 89.0, 379.0, 220.0, 133.0, 880.0, 445.0, 74.0, 188.0, 338.0, 69.0, 309.0, 410.0, 470.0, 59.0, 109.0, 278.0, 130.0, 69.0, 200.0, 45.0, 380.0, 208.0, 170.0, 24.8, 528.0, 550.0, 788.0, 150.0, 78.0, 56.0, 59.0, 169.0, 78.0, 30.0, 480.0, 68.0, 580.0, 155.0, 163.0, 139.0, 69.0, 135.0, 310.0, 448.0, 168.0, 129.0, 370.0, 300.0, 880.0, 258.0, 89.0, 186.9, 345.0, 89.9, 58.0, 125.0, 139.0, 65.0, 59.0, 350.0, 53.0, 39.0, 32.8, 355.0, 450.0, 338.0, 260.0, 140.0, 338.0, 288.0, 238.0, 85.0, 350.0, 79.0, 640.0, 200.0, 39.0, 400.0, 238.0, 270.0, 29.0, 59.0, 249.0, 480.0, 64.0, 79.0, 128.0, 119.0, 59.9, 183.0, 198.0, 320.0, 309.0, 268.0, 130.0, 220.0, 138.0, 50.0, 570.0, 480.0, 99.0, 179.0, 106.0, 56.0, 319.0, 365.0, 330.0, 102.0, 128.0, 49.9, 338.0, 298.0, 135.0, 568.0, 480.0, 59.0, 268.0, 370.0, 338.0, 168.0, 275.0, 119.0, 19.9, 279.0, 29.0, 750.0, 268.0, 55.0, 168.0, 118.0, 219.0, 2599.0, 29.0, 29.8, 34.0, 368.0, 238.0, 12.5, 109.0, 280.0, 260.0, 1319.0, 99.0, 198.0, 69.8, 210.0, 370.0, 13.5, 138.0, 480.0, 35.0, 470.0, 280.0, 785.0, 288.0, 138.0, 380.0, 3.5, 385.0, 89.0, 79.0, 35.0, 239.0, 328.0, 59.9, 63.0, 390.0, 1548.0, 35.0, 550.0, 119.0, 218.0, 34.0, 140.0, 698.0, 520.0, 165.0, 63.0, 29.9, 240.0, 288.0, 34.0, 338.0, 39.0, 158.0, 32.0, 29.0, 54.0, 200.0, 10.0, 158.0, 68.0, 32.9, 135.0, 163.0, 89.0, 338.0, 178.0, 39.9, 173.0, 270.0, 359.0, 188.0, 275.0, 1235.0, 99.0, 59.9, 29.0, 59.9, 175.0, 183.0, 820.0, 129.0, 35.0, 150.0, 309.0, 54.0, 270.0, 138.0, 248.0, 328.0, 54.0, 410.0, 370.0, 480.0, 699.9, 228.0, 328.0, 145.0, 109.0, 212.0, 79.0, 213.0, 175.0, 89.0, 168.0, 208.0, 300.0, 238.0, 358.0, 780.0, 139.0, 285.0, 86.0, 168.0, 469.0, 8.8, 110.0, 373.0, 420.0, 358.0, 170.0, 260.0, 19.9, 108.0, 58.0, 278.0, 69.0, 119.0, 299.0, 58.0, 109.0, 56.0, 213.0, 995.0, 309.0, 29.9, 59.0, 129.0, 19.9, 360.0, 370.0, 139.0, 18.9, 205.0, 65.0, 133.0, 59.9, 295.0, 79.0, 28.0, 3730.0, 125.0, 320.0, 208.0, 85.0, 92.0, 69.0, 108.0, 138.0, 420.0, 145.0, 130.0, 468.0, 143.0, 269.0, 19.8, 520.0, 288.0, 3480.0, 190.0, 170.0, 89.0, 75.0, 239.0, 129.0, 260.0, 355.0, 28.6, 129.0, 285.0, 549.0, 52.0, 290.0, 64.0, 88.0, 149.0, 79.0, 89.0, 200.0, 109.0, 888.0, 5.9, 89.0, 168.0, 49.9, 148.0, 94.0, 89.0, 774.0, 110.0, 52.0, 218.0, 219.0, 119.0, 143.0, 69.0, 218.0, 58.0, 59.0, 373.0, 460.0, 228.0, 29.9, 288.0, 178.0, 213.0, 258.0, 350.0, 248.0, 99.0, 568.0, 62.0, 19.9, 54.0, 74.9, 238.0, 288.0, 268.0, 35.0, 68.88, 166.0, 36.0, 135.0, 17.8, 293.0, 59.0, 338.0, 175.0, 65.9, 79.0, 80.0, 238.0, 17.8, 288.0, 35.0, 89.0, 249.9, 17.9, 195.0, 129.0, 75.0, 188.0, 50.0, 278.0, 334.0, 99.0, 689.0, 59.0, 999.0, 380.0, 360.0, 279.0, 69.9, 25.0, 598.0, 310.0, 210.0, 168.0, 69.9, 358.0, 198.0, 69.0, 9.8, 99.0, 209.0, 110.0, 310.0, 139.0, 26.9, 249.0, 59.9, 199.0, 108.0, 36.0, 219.0, 69.0, 338.0, 309.0, 255.0, 68.0, 309.0, 89.9, 29.8, 79.0, 59.0, 79.0, 295.0, 119.0, 208.0, 32.0, 445.0, 55.0, 99.0, 59.0, 199.0, 309.0, 139.0, 230.0, 79.0, 230.0, 288.0, 256.0, 89.9, 68.0, 29.0, 36.0, 139.0, 268.0, 265.0, 98.0, 59.0, 270.0, 303.0, 52.0, 228.0, 238.0, 288.0, 8.8, 49.0, 66.0, 29.9, 99.0, 110.0, 338.0, 68.0, 228.0, 136.0, 189.0, 119.0, 598.0, 99.0, 210.0, 380.0, 200.0, 54.0, 27.9, 29.0, 53.33, 260.0, 54.33, 39.9, 89.0, 179.0, 49.0, 29.8, 238.0, 309.0, 29.0, 299.0, 65.8, 135.0, 39.0, 69.0, 89.0, 65.0, 345.0, 193.0, 168.0, 59.0, 28.0, 49.0, 88.0, 39.0, 106.0, 1499.0, 189.0, 309.0, 79.0, 218.0, 29.9, 49.0, 239.0, 59.0, 125.0, 19.9, 44.9, 69.0, 49.0, 65.0, 158.0, 16.9, 15.8, 158.0, 69.0, 29.9, 29.0, 299.0, 299.0, 689.0, 66.0, 135.0, 28.0, 104.65, 999.0, 9.8, 44.0, 128.0, 288.0, 668.0, 312.0, 58.0, 168.0, 278.0, 369.0, 49.0, 64.0, 109.5, 69.0, 39.9, 45.0, 204.0, 35.0, 448.0, 65.0, 39.0, 68.0, 39.0, 58.0, 200.0, 59.0, 9.9, 298.0, 238.0, 199.0, 130.0, 58.0, 185.0, 175.0, 129.0, 79.0, 320.0, 49.0, 259.0, 119.0, 45.0, 29.9, 188.0, 54.0, 35.9, 138.0, 35.0, 125.0, 112.64, 185.0, 45.0, 148.0, 94.0, 49.0, 999.0, 999.0, 69.0, 218.0, 299.0, 138.0, 330.0, 168.0, 88.0, 165.0, 165.0, 44.9, 39.0, 195.0, 128.0, 44.9, 59.0, 95.0, 215.0, 205.0, 245.0, 220.0, 44.0, 85.0, 195.0, 199.0, 118.0, 69.0, 85.0, 248.0, 49.0, 19.9, 49.0, 5.8, 54.0, 59.0, 145.0, 26.9, 39.0, 24.9, 54.0, 53.0, 88.0, 35.0, 215.0, 54.0, 118.0, 49.0, 44.0, 69.0, 44.8, 45.0, 77.0, 205.0, 40.8, 39.0, 299.0, 198.0, 49.0, 89.0, 188.0, 58.0, 159.0, 99.0, 1650.0, 74.0, 156.0, 299.0, 59.0, 159.0, 220.0, 39.0, 63.0, 16.0, 218.0, 168.0, 145.0, 26.0, 89.0, 45.0, 45.0, 99.0, 69.0, 122.0, 108.0, 45.0, 55.0, 28.5, 125.0, 29.0, 139.0, 179.0, 109.0, 4699.0, 720.0, 44.0, 44.0, 139.0, 39.0, 158.0, 329.0, 58.0, 15.8, 26.9, 138.0, 39.0, 108.0, 69.0, 45.0, 59.0, 138.0, 59.9, 59.0, 59.0, 39.0, 138.0, 118.0, 203.0, 203.0, 40.99, 399.0, 59.0, 39.0, 38.0, 29.8, 50.0, 39.0, 59.0, 299.0, 45.0, 55.0, 300.0, 35.9, 16.8, 32.0, 27.9, 17.4, 208.0, 19.9, 45.0, 19.9, 35.0, 69.0, 35.9, 64.0, 85.0, 690.0, 17.5, 101.5, 199.0, 109.0, 475.0, 112.0, 135.0, 12.8, 201.0, 13.5, 137.0, 35.0, 34.0, 44.0, 34.8, 29.9, 131.0, 145.0, 115.0, 26.9, 126.0, 79.0, 79.0, 169.0, 89.0, 39.0, 15.9, 68.0, 89.0, 328.0, 598.0, 39.0, 49.0, 39.0, 71.0, 119.0, 405.0, 249.0, 55.0, 78.0, 21.8, 38.0, 32.8, 37.8, 9.7, 45.0, 44.0, 75.0, 39.0, 54.0, 725.0, 16.8, 688.0, 39.0, 68.0, 75.0, 39.9, 300.0, 17.9, 1000.0, 249.0, 39.0, 29.0, 69.0, 107.0, 54.0, 127.0, 79.0, 35.9, 105.0, 145.0, 42.0, 49.0, 79.0, 200.0, 298.0, 1249.0, 50.9, 32.0, 149.0, 45.0, 49.0, 69.0, 315.0, 29.9, 267.0, 58.0, 39.0, 39.0, 89.0, 59.0, 108.0, 68.0, 315.0, 49.0, 149.0, 46.0, 268.0, 39.0, 69.0, 29.0, 79.0, 178.0, 168.0, 115.0, 115.0, 59.0, 89.0, 9.9, 52.0, 158.0, 96.02, 55.0, 65.0, 69.0, 59.0, 999.0, 236.0, 149.0, 84.0, 98.0, 210.0, 54.0, 258.0, 148.0, 99.0, 44.9, 148.0, 35.0, 44.0, 39.0, 54.0, 29.0, 29.0, 42.0, 59.0, 205.0, 108.0, 49.0, 198.0, 88.0, 59.0, 49.0, 158.0, 54.0, 34.0, 29.0, 35.0, 175.0, 269.0, 87.0, 178.0, 35.0, 240.0, 285.0, 89.0, 59.0, 130.0, 167.0, 195.0, 90.0, 49.0, 55.0, 49.0, 59.0, 88.0, 255.0, 365.0, 29.9, 88.0, 39.0, 39.0, 288.0, 95.0, 197.0, 83.0, 49.0, 49.0, 49.0, 44.0, 39.0, 75.0, 49.0, 64.0, 88.0, 140.0, 49.0, 44.0, 59.0, 35.0, 59.0, 49.0, 36.0, 49.0, 39.0, 158.0, 249.0, 26.9, 54.0, 158.0, 39.8, 158.0, 119.0, 69.0, 265.0, 59.0, 69.0, 175.0, 35.0, 109.0, 44.9, 54.0, 128.0, 128.0, 180.0, 458.0, 49.8, 200.0, 35.0, 188.0, 100.0, 295.0, 193.0, 239.0, 178.0, 165.0, 139.0, 49.0, 49.0, 269.0, 99.0, 59.0, 132.0, 45.0, 49.0, 172.0, 245.0, 45.0, 168.0, 29.5, 125.0, 108.0, 88.0, 69.0, 276.0, 49.0, 54.0, 325.0, 204.0, 15.8, 49.0, 32.8, 49.0, 39.0, 29.0, 205.0, 9.9, 69.0, 188.0, 44.0, 49.0, 38.0, 212.0, 155.0, 758.0, 262.55, 18.8, 1050.0, 195.0, 143.0, 108.0, 315.0, 450.0, 144.0, 8.8, 49.0, 248.0, 203.0, 45.0, 49.0, 49.0, 26.8, 183.0, 249.0, 79.0, 99.0, 108.0, 54.9, 139.0, 131.0, 248.0, 105.0, 320.0, 69.0, 139.0, 59.0, 33.0, 110.0, 158.0, 259.0, 205.0, 328.0, 140.0, 289.0, 219.0, 39.0, 35.8, 19.9, 69.0, 59.0, 49.0, 238.0, 165.0, 260.0, 63.0, 358.0, 280.0, 79.9, 39.9, 480.0, 285.0, 320.0, 99.0, 288.0, 188.0, 358.0, 208.0, 139.0, 263.0, 143.0, 153.0, 138.0, 90.0, 54.0, 120.0, 119.0, 49.0, 69.0, 198.0, 320.0, 115.0, 173.0, 243.0, 129.0, 279.0, 740.0, 218.0, 150.0, 99.0, 69.0, 159.0, 183.0, 1220.0, 109.0, 262.0, 550.0, 238.0, 183.0, 248.0, 69.0, 258.0, 139.0, 68.0, 110.0, 79.9, 78.0, 159.0, 129.0, 198.0, 238.0, 14.8, 19.8, 65.0, 328.0, 599.0, 125.0, 178.0, 129.0, 368.0, 77.0, 62.0, 49.0, 280.0, 12.0, 39.9, 29.9, 188.0, 129.0, 178.0, 55.0, 15.9, 8.9, 11.8, 19.9, 48.5, 15.0, 320.0, 19.9, 12.0, 9.9, 9.2, 109.0, 10.0, 9.9, 6.8, 11.8, 15.9, 38.0, 9.9, 13.8, 14.8, 59.9, 170.0, 35.0, 68.0, 9.9, 15.8, 33.0, 34.0, 16.9, 5.9, 19.9, 8.8, 9.8, 27.0, 9.8, 19.9, 30.8, 25.9, 10.8, 35.0, 59.0, 28.0, 9.9, 15.9, 7.9, 8.8, 13.0, 89.0, 59.0, 9.8, 13.0, 19.9, 35.9, 18.5, 5.8, 5.8, 9.9, 218.0, 9.9, 153.0, 69.0, 659.0, 26.9, 27.9, 29.9, 15.9, 16.8, 16.8, 290.0, 9.9, 17.6, 19.6, 35.0, 19.8, 34.0, 32.0, 21.8, 19.0, 34.0, 105.0, 25.8, 49.0, 26.8, 35.9, 9.9, 35.9, 6.8, 29.0, 35.0, 22.8, 213.0, 45.0, 6.8, 19.8, 28.0, 18.9, 35.0, 16.8, 118.0, 6.8, 470.0, 79.0, 27.9, 17.9, 9.8, 9.9, 9.9, 9.8, 17.5, 6.8, 6.8, 750.0, 285.0, 128.0, 188.0, 69.0, 26.9, 79.0, 203.0, 330.0, 208.0, 69.0, 423.0, 330.0, 68.0, 54.9, 133.0, 218.0, 780.0, 169.0, 169.9, 29.0, 69.0, 63.0, 169.0, 9.9, 29.0, 328.0, 29.9, 39.0, 115.0, 26.8, 192.0, 34.9, 360.0, 18.8, 128.0, 41.9, 260.0, 225.0, 360.0, 25.9, 1350.0, 59.0, 59.0, 9.9, 9.9, 6.8, 6.8, 130.0, 59.9, 370.0, 139.0, 69.0, 208.0, 185.0, 55.0, 660.0, 223.0, 9.8, 108.0, 26.6, 189.0, 125.0, 79.0, 108.0, 59.0, 280.0, 103.0, 238.0, 85.0, 189.0, 385.0, 305.0, 199.0, 309.0, 228.0, 160.0, 79.0, 248.0, 113.0, 54.0, 195.0, 169.0, 19.9, 77.8, 32.5, 207.0, 319.0, 260.0, 268.0, 129.0, 398.0, 29.0, 49.9, 59.9, 29.9, 118.0, 6.8, 6.8, 69.0, 336.0, 320.0, 264.0, 218.0, 229.0, 345.0, 179.0, 6.8, 68.0, 19.8, 288.0, 79.0, 248.0, 8.8, 539.0, 163.0, 190.0, 235.0, 267.0, 89.9, 215.8, 520.0, 29.0, 28.88, 54.0, 170.0, 62.0, 198.0, 58.88, 99.0, 128.0, 110.0, 138.0, 598.0, 19.9, 129.0, 436.0, 699.0, 26.8, 17.6, 318.0, 370.0, 65.0, 16.0, 348.0, 19.0, 55.0, 441.0, 12.8, 6.8, 39.0, 300.0, 85.0, 59.0, 238.0, 55.0, 28.9, 69.0, 69.0, 188.0, 238.0, 449.0, 310.0, 218.0, 390.0, 248.0, 288.0, 396.0, 200.0, 44.9, 339.0, 299.0, 49.9, 39.0, 63.0, 5.8, 56.0, 155.0, 248.0, 39.9, 39.9, 320.0, 573.0, 345.0, 69.0, 178.0, 35.0, 168.0, 69.0, 168.0, 54.0, 209.0, 29.0, 229.0, 15.5, 320.0, 108.0, 49.0, 15.7, 42.0, 6.8, 64.0, 59.0, 239.0, 39.0, 29.0, 53.8, 379.0, 168.0, 218.0, 303.0, 17.0, 235.0, 152.0, 165.0, 148.0, 148.0, 79.0, 59.9, 128.0, 185.0, 309.0, 26.6, 120.0, 238.0, 300.0, 9.9, 29.9, 357.0, 239.0, 200.0, 189.0, 109.0, 12.5, 180.0, 199.0, 119.0, 728.0, 218.0, 188.0, 258.0, 69.0, 56.0, 99.9, 439.2, 228.0, 3.9, 29.9, 235.0, 198.0, 109.0, 149.0, 358.0, 29.9, 40.0, 255.0, 129.0, 49.0, 69.0, 99.0, 67.0, 385.0, 54.0, 24.8, 215.0, 35.0, 9.9, 49.0, 9.9, 59.0, 198.0, 69.0, 28.0, 45.0, 98.0, 268.0, 370.0, 8.8, 178.0, 135.0, 69.0, 185.0, 109.0, 19.9, 23.9, 4.9, 345.0, 543.0, 588.0, 15.9, 168.0, 34.0, 44.0, 5.9, 148.0, 25.8, 158.0, 380.0, 27.9, 290.0, 158.0, 99.0, 19.9, 25.8, 290.0, 34.9, 941.0, 39.0, 309.0, 17.0, 329.0, 39.0, 46.0, 65.0, 19.8, 199.0, 568.0, 338.0, 460.0, 119.9, 328.0, 208.0, 288.0, 49.0, 1350.0, 68.0, 69.9, 65.0, 94.0, 20.0, 299.0, 250.0, 165.0]]
box = Boxplot(init_opts=opts.InitOpts(theme=ThemeType.ROMA))
box.add_xaxis(['口红价格']).add_yaxis('口红价格',box.prepare_data(price_list)).set_colors('#0b2e4a')
box.set_global_opts(title_opts=opts.TitleOpts(title='口红价格 箱型图',title_textstyle_opts=opts.TextStyleOpts(font_family='STXinwei',font_size=20)))
box.set_series_opts(label_opts=opts.LabelOpts(font_size=10,font_family='Times New Roman'))
# box.render('05口红价格 箱线图.html')


# print(df['价格'].describe())
# 手工划分价格区间：100以下，100-200，200-300，300-400，400以上,并作饼图
df['价格区间'] = df['价格'].apply(lambda x: '(0,100)' if x<100 else '[100,200)' if x<200 else '[200,300)' if x<300 else '[300,400)' if x<400 else '[400,+∞)')
price_section = df.groupby('价格区间').count()['商品描述']
# print(price_section.index.tolist())
# print(price_section.values.tolist())
x_pie_ps = ['(0,100)', '[100,200)', '[200,300)', '[300,400)', '[400,+∞)']
y_pie_ps = [928, 440, 310, 219, 142]
pie_ps = (
    Pie(init_opts=opts.InitOpts(theme=ThemeType.ROMA))
    .add(series_name='',data_pair=[list(z) for z in zip(x_pie_ps,y_pie_ps)],radius=['15%','50%'])
    .set_colors(['#0b2a4e','#C00000','#FFC000','#31869B','#F2F2F2'])
    .set_global_opts(
        title_opts=opts.TitleOpts(title='价格区间 饼图',title_textstyle_opts=opts.TextStyleOpts(font_family='STXinwei',font_size=20)),
        legend_opts=opts.LegendOpts(is_show=False))
    .set_series_opts(label_opts=opts.LabelOpts(color='#404040',font_size=12,font_family='Times New Roman',formatter="{b}-数量{c}-占比{d}%"))
)
# pie_ps.render('06价格区间 饼图.html')


# 商品描述词云
str_des = ''.join(df['商品描述'].tolist()).rstrip('0123456789')
jieba.load_userdict('不想被分割的词.txt')
# 去掉字母
str_drop_abc = re.sub('[a-zA-Z]','',str_des)
# 去掉数字
s = re.sub('\d+','',str_drop_abc).replace('【','').replace('】','').replace(' ','').replace('/','').replace('#','').replace('[','').replace(']','').replace('！','').replace('~','')
# 分词并统计词频
seg_list = jieba.cut(s)
counter = dict(Counter(seg_list))
# print(counter)
# 生成词云需要的参数形式
data_pair = zip(counter.keys(),counter.values())
word_cloud = (
    WordCloud(init_opts=opts.InitOpts(theme=ThemeType.ROMA))
    .add(series_name='',data_pair=[list(z) for z in data_pair],shape='diamond')
    .set_colors(['#0b2a4e','#C00000','#FFC000','#31869B','#F2F2F2'])
    .set_global_opts(
        title_opts=opts.TitleOpts(title='商品描述 词云图',title_textstyle_opts=opts.TextStyleOpts(font_family='STXinwei',font_size=20)),
        legend_opts=opts.LegendOpts(is_show=False))
)
# word_cloud.render('07商品描述 词云图.html')

page = (
    Page(page_title='可视化大屏')
    .add(bar_30000)
    .add(pie_sm)
    .add(pie_ps)
    .add(bar_shopTop20)
)
page.render()
'''


